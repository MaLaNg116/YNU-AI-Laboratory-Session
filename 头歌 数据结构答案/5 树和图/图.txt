第1关

ABCACB

第2关

BCDBBB

第3关

//深度优先遍历
int visited[MAXV];                //全局数组,记录访问的点
void DFS(AdjGraph *G,int v)
{
    /********** Begin **********/
    ArcNode *p;
    visited[v]=1;
    printf("%d  ",v);
    p=G->adjlist[v].firstarc;
    while(p != NULL){
        if(visited[p->adjvex]==0)
        DFS(G,p->adjvex);
        p=p->nextarc;
    }
    /********** End **********/
}


第4关

//广度优先遍历
void BFS(AdjGraph *G,int v)
{
    /********** Begin **********/
    ArcNode *p;
    int que[MAXV],top=0,rear=0; //定义一个循环队列que
    int j,l=0,visited[MAXV];
    for (int i=0;i<G->n;i++) visited[i]=0; //visited数组置初值0
    printf("%d ",v); //访问初始顶点
    visited[v]=1;    //改变这个顶点的状态，为1表示遍历过了，为0表示没有遍历
    rear =(rear+1)%MAXV;
    que[rear]=v;     //初始顶点进队
    while(top != rear){  //队不为空时循环
        top =(top+1)%MAXV;
        j=que[top];  //出队顶点v
        p=G->adjlist[j].firstarc;   //查找v的第一个相邻点
        while(p != NULL){           //查找v的所有相邻点
            if (visited[p->adjvex]==0){     //未访问过则访问之
                printf("%d ",p->adjvex);	//访问该点并进队
                visited[p->adjvex]=1;
                rear=(rear+1) % MAXV;
                que[rear]=p->adjvex;
            }
            p=p->nextarc;       //查找v的下一个相邻点
        }
    }
    /********** End **********/
}


第5关

//prim
void Prim(MGraph g,int v)
{
    int lowcost[MAXV];            /*顶点i是否在U中*/
    int min;
    int closest[MAXV],i,j,k;
    for (i=0;i<g.n;i++)              /*给lowcost[]和closest[]置初值*/
    {
        lowcost[i]=g.edges[v][i];
        closest[i]=v;
    }
    for (i=1;i<g.n;i++)              /*找出n-1个顶点*/
    {
    	/*在(V-U)中找出离U最近的顶点k，用k记录最近顶点的编号*/
        min=INF;
        /********** Begin **********/
        for (j=0; j<g.n; j++)     //在(V-U)中找出离U最近的顶点k
            if (lowcost[j]!=0 && lowcost[j]<min)
            {
                min=lowcost[j];
                k=j;            //k记录最近顶点的编号
            }
        /********** End **********/
        printf("(%d,%d):%d\n",closest[k],k,min);
        lowcost[k]=0;             /*标记k已经加入U*/
        /*修改数组lowcost和closest*/
        /********** Begin **********/
        for (j=0; j<g.n; j++)       //修改数组lowcost和closest
            if (g.edges[k][j]!=0 && g.edges[k][j]<lowcost[j])
            {
                lowcost[j]=g.edges[k][j];
                closest[j]=k;
            }
        /********** End **********/
    }
    
}

//krusal
void InsertSort(Edge E[],int n) /*对E[0..n-1]按递增有序进行直接插入排序*/
{
    int i,j;
    Edge temp;
    for (i=1;i<n;i++)
    {
        temp=E[i];
        j=i-1;                /*从右向左在有序区E[0..i-1]中找E[i]的插入位置*/
        while (j>=0 && temp.w<E[j].w)
        {
            E[j+1]=E[j];    /*将关键字大于E[i].w的记录后移*/
            j--;
        }
        E[j+1]=temp;        /*在j+1处插入E[i] */
    }
}
void Kruskal(MGraph g)
{
    /********** Begin **********/
    int i,j,u1,v1,sn1,sn2,k;
    int vset[MAXV];
    Edge E[MaxSize];    //存放所有边
    k=0;                //E数组的下标从0开始计
    for (i=0; i<g.n; i++)   //由g产生的边集E
        for (j=0; j<g.n; j++)
            if (g.edges[i][j]!=0 && g.edges[i][j]!=INF)
            {
                E[k].u=i;
                E[k].v=j;
                E[k].w=g.edges[i][j];
                k++;
            }
    InsertSort(E,g.e);      //采用直接插入排序对E数组按权值递增排序
    for (i=0; i<g.n; i++)   //初始化辅助数组
        vset[i]=i;
    k=1;    //k表示当前构造生成树的第几条边,初值为1
    j=0;    //E中边的下标,初值为0
    while (k<g.n)       //生成的边数小于n时循环
    {
        u1=E[j].u;
        v1=E[j].v;      //取一条边的头尾顶点
        sn1=vset[u1];
        sn2=vset[v1];   //分别得到两个顶点所属的集合编号
        if (sn1!=sn2)   //两顶点属于不同的集合
        {
            printf("(%d,%d):%d\n",u1,v1,E[j].w);
            k++;                     //生成边数增1
            for (i=0; i<g.n; i++)   //两个集合统一编号
                if (vset[i]==sn2)   //集合编号为sn2的改为sn1
                    vset[i]=sn1;
        }
        j++;               //扫描下一条边
    }
    /********** End **********/
}



第6关

//拓扑排序
void TopSort(ALGraph *G)
{
    
    int i,j;
    int St[MAXV],top=-1;              /*栈St的指针为top*/
    ArcNode *p;
    for (i=0;i<G->n;i++)            /*入度置初值0*/
        G->adjlist[i].count=0;
    for (i=0;i<G->n;i++)            /*求所有顶点的入度*/
    {
        p=G->adjlist[i].firstarc;
        while (p!=NULL)
        {
            G->adjlist[p->adjvex].count++;
            p=p->nextarc;
        }
    }
    for (i=0;i<G->n;i++)
        if (G->adjlist[i].count==0)  /*入度为0的顶点进栈*/
        {
            top++;
            St[top]=i;
        }
    while (top>-1)                     /*栈不为空时循环*/
    {
        /********** Begin **********/
        i=St[top]; top--;
        printf("%d ",i);
        p=G->adjlist[i].firstarc;
        while(p!=NULL){
            j=p->adjvex;
            G->adjlist[j].count--;
            if(G->adjlist[j].count==0){
                top++;
                St[top]=j;
            }
            p=p->nextarc;
        }
        /********** End **********/
    }
}

第7关

void Floyd(MGraph g)
{
    /********** Begin **********/
   	int A[MAXV][MAXV],path[MAXV][MAXV];
    int i,j,k;
    for(i=0;i<g.n;i++){
        for(j=0;j<g.n;j++){
            A[i][j]=g.edges[i][j];
            path[i][j]=-1;
        }
    }
    for(k=0;k<g.n;k++){
        for(i=0;i<g.n;i++){
            for(j=0;j<g.n;j++){
                if(A[i][j]>A[i][k]+A[k][j]){
                    A[i][j]=A[i][k]+A[k][j];
                    path[i][j]=k;
                }
            }
        }
    }
    /********** End **********/
    Dispath(A,path,g.n);   /*输出最短路径*/
}

